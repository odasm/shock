CREATE OR REPLACE PROCEDURE PROC_MON_INSERT(BEGIN_TIME IN DATE,END_TIME IN DATE) IS
/************************************************************************
  *NAME        : PROC_ANALYSIS(BEGIN_TIME
  *FUNCTION    : 根据所给参数检出相应服务消费记录
                 从AIP_MESSAGE中抽数据，汇总计算插入表 SERV_MON和
                 SERV_MON_HIS中
  *INPUT       begin_time 分析时段始值 end_time 分析时段尾值: 
  *OUTPUT      : 
  *AUTHOR      : ZHEN WANG
  *CREATEDATE  : 2010-3-26
  *UPDATEDATE  ：2010-4-29
  *************************************************************************/
  TYPE M_ROW_TYPE IS RECORD(
       SERV_ID NUMBER,
       REQUEST_TIMES NUMBER,
       BUSI_MO_SUM NUMBER,
       BUSI_MO_AVG NUMBER,
       FAILURE_TIMES NUMBER,
       CSB_ACHIEVE_AVG_TIME NUMBER,
       CSB_ACHIEVE_MIN_TIME NUMBER,
       CSB_ACHIEVE_MAX_TIME NUMBER,
       BUSI_SERV_AVG_TIME NUMBER,
       BUSI_SERV_MIN_TIME NUMBER,
       BUSI_SERV_MAX_TIME NUMBER,
       SENDSYSTEM VARCHAR2(32));
  
  
  CUSTFAUSTCURSOR  SYS_REFCURSOR;
  CUST_FAULT_ROW    M_ROW_TYPE;                     
  RESPONSE_TIMES    NUMBER;                         
  SUCCESS_RATE      NUMBER(3,2);                         
  FAILURE_RATE      NUMBER(3,2);                         
   
BEGIN
   --清空表里的数据开始重新分析获取新的数据后面不则删除
   
   --DELETE FROM SERV_MON;
  
  -- 查询数据到游标里去
  
   OPEN CUSTFAUSTCURSOR FOR
        --开始版本现将分析时长确定为5分钟因此注释掉
        /*
        SELECT 
        M.SERV_ID  SERV_ID,
        COUNT(1) REQUEST_TIMES,
        SUM(M.MSG_SIZE)  BUSI_MO_SUM,
        AVG(M.MSG_SIZE)  BUSI_MO_AVG,
        COUNT(DECODE(M.RESPONSE_TIME,NULL,1))  FAILURE_TIMES,
        AVG(M.RESPONSE_TIME-M.RECEIVE_TIME)  RESPONSE_AVG_TIME,        
        MIN(M.RESPONSE_TIME-M.RECEIVE_TIME)  RESPONSE_MIN_TIME,
        MAX(M.RESPONSE_TIME-M.RECEIVE_TIME)  RESPONSE_MAX_TIME,
        MAX(M.CTRL_ANALYSE_TIME)  CTRL_ANALYSE_TIME,
        MAX(M.SEND_SYSTEM) SENDSYSTEM

        FROM
        
        --将时间在控制时行里的相应的服务条目选出再加上分析控制时长形成一个新表作为查询表
        
        (SELECT 
        M.SERV_ID SERV_ID , M.SEND_SYSTEM  SEND_SYSTEM,    
        M.SEND_TIME  SEND_TIME, M.RECEIVE_TIME  RECEIVE_TIME,  
        M.REQUEST_TIME  REQUEST_TIME, M.RESPONSE_TIME  RESPONSE_TIME, 
        M.RESEND_COUNT  RESEND_COUNT,  M.SERVICE_STATE  SERVICE_STATE, 
        M.MSG_SIZE  MSG_SIZE, C.CTRL_ANALYSE_TIME CTRL_ANALYSE_TIME
        FROM AIP_MESSAGE M ,SERV_FLUX_CTL C
        WHERE M.SERV_ID=C.SERV_ID      
        AND M.REQUEST_TIME >= SYSDATE-(C.CTRL_ANALYSE_TIME+60000)/(24*60*60*1000)
        AND M.REQUEST_TIME < SYSDATE-1/(24*60*60)) M
        
        GROUP BY M.SERV_ID;     
        */
        SELECT 
        M.SERV_ID  SERV_ID,
        COUNT(1) REQUEST_TIMES,
        SUM(M.MSG_SIZE)  BUSI_MO_SUM,
        AVG(M.MSG_SIZE)  BUSI_MO_AVG,
        COUNT(DECODE(M.RESPONSE_TIME,NULL,1))  FAILURE_TIMES,
        --TIMESTAMP类型相减是一个字符串下面表达式是计算它们的毫秒差后面一样
        AVG(TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,2,9))*24*3600000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,12,2))*3600000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,15,2))*60000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,18,2))*1000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,21,3)))  CSB_ACHIEVE_AVG_TIME,        
        MIN(TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,2,9))*24*3600000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,12,2))*3600000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,15,2))*60000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,18,2))*1000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,21,3))) CSB_ACHIEVE_MIN_TIME,
        MAX(TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,2,9))*24*3600000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,12,2))*3600000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,15,2))*60000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,18,2))*1000+
TO_NUMBER(SUBSTR(M.REQUEST_TIME-M.RECEIVE_TIME+M.SEND_TIME-M.RESPONSE_TIME,21,3)))  CSB_ACHIEVE_MAX_TIME,
        AVG(TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,2,9))*24*3600000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,12,2))*3600000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,15,2))*60000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,18,2))*1000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,21,3)))  BUSI_SERV_AVG_TIME,        
        MIN(TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,2,9))*24*3600000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,12,2))*3600000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,15,2))*60000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,18,2))*1000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,21,3))) BUSI_SERV_MIN_TIME,
        MAX(TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,2,9))*24*3600000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,12,2))*3600000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,15,2))*60000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,18,2))*1000+
TO_NUMBER(SUBSTR(M.RESPONSE_TIME-M.REQUEST_TIME,21,3)))  BUSI_SERV_MAX_TIME,
                                                                            
        M.SEND_SYSTEM SENDSYSTEM
              
        FROM AIP_MESSAGE M 
        WHERE              
       ( M.RECEIVE_TIME BETWEEN BEGIN_TIME AND END_TIME    
        AND  M.SERVICE_STATE!=100)
        OR (M.RECEIVE_TIME BETWEEN BEGIN_TIME-1/24 AND END_TIME-1/24 AND
        M.RESPONSE_TIME BETWEEN BEGIN_TIME AND END_TIME)
         
        GROUP BY M.SERV_ID,M.SEND_SYSTEM;
    --每条记录进行计算入库
    LOOP
        
       FETCH CUSTFAUSTCURSOR
       INTO CUST_FAULT_ROW;
       EXIT WHEN CUSTFAUSTCURSOR%NOTFOUND;
        
        --计算成功和失败率
        RESPONSE_TIMES:=CUST_FAULT_ROW.REQUEST_TIMES-CUST_FAULT_ROW.FAILURE_TIMES;
        SUCCESS_RATE:=RESPONSE_TIMES/CUST_FAULT_ROW.REQUEST_TIMES;
        FAILURE_RATE:=1-SUCCESS_RATE;
        
        --入库
        
            --此表定期更新不保存历史数据只关注当前分析时长内的数据分析信息
        INSERT INTO SERV_MON
       (SERV_MONITOR_ID,
       SERV_ID,
       BUSI_MO_SUM,
       BUSI_MO_AVG,
       REQUEST_TIMES,
       RESPONSE_TIMES,
       SUCCESS_RATE,
       FAILURE_RATE,
       CSB_ACHIEVE_AVG_TIME,
       CSB_ACHIEVE_MIN_TIME,
       CSB_ACHIEVE_MAX_TIME,
       BUSI_SERV_AVG_TIME,
       BUSI_SERV_MIN_TIME,
       BUSI_SERV_MAX_TIME,
       ANALYSIS_END_TIME,
       UPDATE_TIME,
       CTRL_ANALYSE_TIME,
       SERV_MAN_SEND_CODE
       )
       VALUES
       (SERV_MONITOR_ID_SEQ.NEXTVAL,
        CUST_FAULT_ROW.SERV_ID,
        CUST_FAULT_ROW.BUSI_MO_SUM,
        CUST_FAULT_ROW.BUSI_MO_AVG,
        CUST_FAULT_ROW.REQUEST_TIMES,
        RESPONSE_TIMES,
        SUCCESS_RATE,
        FAILURE_RATE,
        CUST_FAULT_ROW.CSB_ACHIEVE_AVG_TIME,
        CUST_FAULT_ROW.CSB_ACHIEVE_MIN_TIME,
        CUST_FAULT_ROW.CSB_ACHIEVE_MAX_TIME,
        CUST_FAULT_ROW.BUSI_SERV_AVG_TIME,
        CUST_FAULT_ROW.BUSI_SERV_MIN_TIME,
        CUST_FAULT_ROW.BUSI_SERV_MAX_TIME,
        END_TIME,--分析时段尾时
        SYSDATE,--更新时间
        --CUST_FAULT_ROW.CTRL_ANALYSE_TIME,,控制分析里长没有用到默认为1小时
        60*60*1000,
        CUST_FAULT_ROW.SENDSYSTEM);
        
               --此表保存所有分析数据以更新时间来区别何时分析(r不再使用这张表)
        /*INSERT INTO SERV_MON_HIS
       (SERV_MONITOR_ID,
       SERV_ID,
       BUSI_MO_SUM,
       BUSI_MO_AVG,
       REQUEST_TIMES,
       RESPONSE_TIMES,
       SUCCESS_RATE,
       FAILURE_RATE,
       CSB_ACHIEVE_AVG_TIME,
       CSB_ACHIEVE_MIN_TIME,
       CSB_ACHIEVE_MAX_TIME,
       BUSI_SERV_AVG_TIME,
       BUSI_SERV_MIN_TIME,
       BUSI_SERV_MAX_TIME,
       ANALYSIS_END_TIME,
       UPDATE_TIME,
       CTRL_ANALYSE_TIME,
       SERV_MAN_SEND_CODE
       )
       VALUES
       (SERV_MON_HIS_ID_SEQ.NEXTVAL,
        CUST_FAULT_ROW.SERV_ID,
        CUST_FAULT_ROW.BUSI_MO_SUM,
        CUST_FAULT_ROW.BUSI_MO_AVG,
        CUST_FAULT_ROW.REQUEST_TIMES,
        RESPONSE_TIMES,
        SUCCESS_RATE,
        FAILURE_RATE,
        CUST_FAULT_ROW.CSB_ACHIEVE_AVG_TIME,
        CUST_FAULT_ROW.CSB_ACHIEVE_MIN_TIME,
        CUST_FAULT_ROW.CSB_ACHIEVE_MAX_TIME,
        CUST_FAULT_ROW.BUSI_SERV_AVG_TIME,
        CUST_FAULT_ROW.BUSI_SERV_MIN_TIME,
        CUST_FAULT_ROW.BUSI_SERV_MAX_TIME,
        END_TIME,--分析时段尾时
        SYSDATE,--更新时间
        --CUST_FAULT_ROW.CTRL_ANALYSE_TIME,,控制分析里长没有用到默认为1小时
        60*60*1000,
        CUST_FAULT_ROW.SENDSYSTEM);*/
        
    END LOOP;
    CLOSE CUSTFAUSTCURSOR;
    INSERT INTO aip_analysis_end_time values (aip_analysis_time_id.nextval,END_TIME,'serv_mon');
    COMMIT;
    
    --如果出现例外则回滚提交例外
    EXCEPTION
          WHEN OTHERS THEN
          ROLLBACK;
          RAISE;  
    
END PROC_MON_INSERT;
/
